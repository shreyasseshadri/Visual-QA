import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("/tmp/data/", one_hot = True)  #inputting the data

n_classes = 10     #defining number of classes
batch_size = 128   #defining number of batches

x = tf.placeholder('float', [None, 784])  #a random tensor
y = tf.placeholder('float')   #a random tensor

keep_rate = 0.8 #learning rate
keep_prob = tf.placeholder(tf.float32) 

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME') 
#virtual image patches being generated with x as input and a virtual tensor is generated with dimensions other than x which are derived bhy x's and W's dimensions

def maxpool2d(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
#returns a tensor of given data format.Also the returned tensor is max pooled input


def convolutional_neural_network(x):          #defining the cnn model
    weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),
               'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),
               'W_fc':tf.Variable(tf.random_normal([7*7*64,1024])),
               'out':tf.Variable(tf.random_normal([1024, n_classes]))}

    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),
               'b_conv2':tf.Variable(tf.random_normal([64])),
               'b_fc':tf.Variable(tf.random_normal([1024])),
               'out':tf.Variable(tf.random_normal([n_classes]))}

    x = tf.reshape(x, shape=[-1, 28, 28, 1])

    conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])
    conv1 = maxpool2d(conv1)
    
    conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])
    conv2 = maxpool2d(conv2)

    fc = tf.reshape(conv2,[-1, 7*7*64])
    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])
    fc = tf.nn.dropout(fc, keep_rate)
    #defining different layers and their biases.firstly we have 5x5 convolutions on the initial image, and producing 32 outputs. 
#Next, we take 5x5 convolutions of the 32 inputs and make 64 outputs. 
#From here, we're left with 7x7 sized images, and 64 of them, and then we're outputting to 1024 nodes in the fully connected layer. 
#Then, the output layer is 1024 layers, to 10.

    output = tf.matmul(fc, weights['out'])+biases['out']

    return output

def train_neural_network(x):
    prediction = convolutional_neural_network(x)
    #we passed the data and will predict according to that
    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))
    #cost fiunction is defined
    optimizer = tf.train.AdamOptimizer().minimize(cost)
    #this step defines a cost function and optimizes it
    
    hm_epochs = 10
    with tf.Session() as sess:
        sess.run(tf.initialize_all_variables())

        for epoch in range(hm_epochs):
            epoch_loss = 0
            for _ in range(int(mnist.train.num_examples/batch_size)):
                epoch_x, epoch_y = mnist.train.next_batch(batch_size)
                _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})
                epoch_loss += c

            print('Epoch', epoch, 'completed out of',hm_epochs,'loss:',epoch_loss)

        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))

        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
        #optimizer is run for each batch 
        #to keep track of the cost at each step total cost per epoch is added
        #loss is the output which keeps on decreasing with epochs
        print('Accuracy:',accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))

train_neural_network(x)
